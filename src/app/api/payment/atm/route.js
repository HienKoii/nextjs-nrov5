import { NextResponse } from "next/server";
import db from "@/lib/db"; // K·∫øt n·ªëi database MySQL
import axios from "axios";
import { updateAccountBalance } from "@/app/Service/accountService";

export async function POST(req) {
  try {
    const response = await axios.get(`https://api.sieuthicode.net/historyapivcbv2/${process.env.TOKEN_ATM}`);

    const transactions = response.data.transactions;

    let count = 0;

    for (const transaction of transactions) {
      const { transactionID, amount, description, type, transactionDate } = transaction;

      if (type === "IN") {
        // D√πng regex ƒë·ªÉ t√¨m ID user trong description (v√≠ d·ª•: "naptien 611")
        const match = description.match(/naptien (\d+)/);

        if (match) {
          const userId = parseInt(match[1], 10);

          // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
          const user = await db.query("SELECT id FROM account WHERE id = ?", [userId]);

          if (user.length > 0) {
            // Ki·ªÉm tra xem giao d·ªãch ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ch∆∞a
            const checkExist = await db.query("SELECT * FROM deposits WHERE transaction_id = ?", [transactionID]);

            if (checkExist[0].length === 0) {
              // C·ªông ti·ªÅn v√†o t√†i kho·∫£n ng∆∞·ªùi d√πng
              await updateAccountBalance(userId, amount);

              // L∆∞u l·ªãch s·ª≠ giao d·ªãch v√†o database
              await db.query("INSERT INTO deposits (transaction_id, user_id, amount, transaction_date) VALUES (?, ?, ?, ?)", [transactionID, userId, amount, transactionDate]);

              count++;
            } else {
              console.log("‚ö†Ô∏è Giao d·ªãch ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥, b·ªè qua.");
            }
          } else {
            console.log("üö´ User kh√¥ng t·ªìn t·∫°i, b·ªè qua giao d·ªãch.");
          }
        } else {
          console.log("üö´ Kh√¥ng t√¨m th·∫•y ID user trong m√¥ t·∫£ giao d·ªãch.");
        }
      } else {
        console.log("üîÑ Giao d·ªãch kh√¥ng ph·∫£i l√† n·∫°p ti·ªÅn, b·ªè qua.");
      }
    }

    console.log(`‚úÖ Ho√†n th√†nh x·ª≠ l√Ω. ƒê√£ c·ªông ti·ªÅn cho ${count} giao d·ªãch h·ª£p l·ªá.`);
    return NextResponse.json({ message: `ƒê√£ c·ªông ti·ªÅn cho ${count} giao d·ªãch h·ª£p l·ªá` }, { status: 200 });
  } catch (error) {
    console.error("‚ùå L·ªói khi x·ª≠ l√Ω auto deposit:", error);
    return NextResponse.json({ message: "L·ªói x·ª≠ l√Ω auto deposit" }, { status: 500 });
  }
}
