"use client";
import { useUser } from "@/context/UserContext";
import useConfig from "@/hook/useConfig";
import { formatCurrency } from "@/lib/utils";
import axios from "axios";
import Link from "next/link";
import { useRouter, useSearchParams } from "next/navigation";
import { useEffect, useState } from "react";
import { Image, Table } from "react-bootstrap";

export default function PaymentAtmPage() {
  const router = useRouter();
  const [isChecking, setIsChecking] = useState(true);
  const searchParams = useSearchParams();
  const { config } = useConfig();
  const { user } = useUser();

  useEffect(() => {
    const storedToken = localStorage.getItem("token");
    if (!storedToken) {
      router.push("/");
    }
  }, []); // üî• ƒê·ªçc localStorage ch·ªâ khi component mounted

  useEffect(() => {
    if (!user?.id || !searchParams.get("amount") || !searchParams.get("trans_id")) return;

    const saveTransaction = async () => {
      try {
        const response = await axios.post("/api/payment/atm/create", {
          user_id: user.id,
          amount: searchParams.get("amount"),
          trans_id: searchParams.get("trans_id"),
        });
        console.log("X·ª≠ l√Ω l∆∞u n·∫°p atm: ", response);

        if (!response.data.success) {
          setIsChecking(false);
        }
      } catch (error) {
        console.error("L·ªói khi l∆∞u giao d·ªãch:", error);
      }
    };

    saveTransaction();
  }, [user?.id, searchParams]); // üî• Th√™m user.id v√† searchParams v√†o dependencies

  useEffect(() => {
    if (!searchParams.get("amount")) return;

    const checkTransaction = async () => {
      try {
        const response = await axios.get("https://api.sieuthicode.net/historyapiviettinv2/851601caa8b57859fc0e8b61cdcb2a78");
        const data = response.data;
        console.log("L·∫•y danh s√°ch l·ªãch s·ª≠ giao dich: ", response.data);

        if (data.status === "success" && Array.isArray(data.transactions)) {
          // üî• Ki·ªÉm tra transactions c√≥ ph·∫£i m·∫£ng kh√¥ng
          const transaction = data.transactions.find((t) => t.description.includes(searchParams.get("trans_id")));

          if (transaction) {
            const updateAtm = await axios.post("/api/payment/atm/update", {
              trans_id: searchParams.get("trans_id"),
              amount: transaction.amount,
              user_id: user?.id,
            });
            console.log("X·ª≠ l√Ω c·∫≠p nh·∫≠t n·∫°p atm: ", updateAtm);

            setTransactionSuccess(true);
            alert(`üéâ N·∫°p ti·ªÅn th√†nh c√¥ng! S·ªë ti·ªÅn: ${transaction.amount} VND`);
            setIsChecking(false);
          }
        }
      } catch (error) {
        console.error("L·ªói khi ki·ªÉm tra giao d·ªãch:", error);
      }
    };

    const interval = setInterval(checkTransaction, 10000);
    const timeout = setTimeout(() => {
      alert("‚ö† N·∫øu sau 10 ph√∫t ch∆∞a th·∫•y ti·ªÅn v√†o t√†i kho·∫£n, vui l√≤ng li√™n h·ªá Admin.");
    }, 10 * 60 * 1000);

    return () => {
      clearInterval(interval);
      clearTimeout(timeout);
    };
  }, [searchParams, user?.id]); // üî• Th√™m dependencies tr√°nh l·ªói

  return (
    <div>
      <div className="text-center fw-semibold text-white">
        <Table responsive="sm" hover className="transparent-table">
          <tbody>
            <tr>
              <td className="text-white">Ng√¢n h√†ng</td>
              <td className="text-white">{config?.payment?.atm?.nameStk}</td>
            </tr>
            <tr>
              <td className="text-white">Ch·ªß t√†i kho·∫£n</td>
              <td className="text-white">{config?.payment?.atm?.name}</td>
            </tr>
            <tr>
              <td className="text-white">S·ªë t√†i kho·∫£n</td>
              <td className="text-white">{config?.payment?.atm?.stk}</td>
            </tr>
            <tr>
              <td className="text-white">S·ªë ti·ªÅn</td>
              <td className="text-white">{formatCurrency(searchParams.get("amount"))}</td>
            </tr>
            <tr>
              <td className="text-white">N·ªôi dung</td>
              <td className="text-white">
                {user?.id} {searchParams.get("trans_id")}
              </td>
            </tr>
          </tbody>
        </Table>
        <div>
          <p className="fs-5">Qu√©t m√£ ƒë·ªÉ thanh to√°n</p>
          <Image
            src={`https://img.vietqr.io/image/${config?.payment?.atm?.key}-${config?.payment?.atm?.stk}-compact.png?amount=${searchParams.get("amount")}&addInfo=${user?.id}%20${searchParams.get("trans_id")}`} //
            alt="qr" //
            width={250}
          />
        </div>
        <div className="hk-flex p-2 mt-2">
          <Link href={"/payment/history"} className="text-warning">
            Ki·ªÉm tra l·ªãch s·ª≠ n·∫°p
          </Link>
        </div>
        <p className="fs-6 mt-3">
          - L∆∞u √Ω khi thanh to√°n: Giao d·ªãch tr√™n ho√†n to√†n ƒë∆∞·ª£c ki·ªÉm duy·ªát t·ª± ƒë·ªông, y√™u c·∫ßu ki·ªÉm tra k·ªπ n·ªôi dung chuy·ªÉn ti·ªÅn tr∆∞·ªõc khi th·ª±c hi·ªán chuy·ªÉn. N·∫øu ghi thi·∫øu, sai ho·∫∑c qu√° 10 ph√∫t kh√¥ng th·∫•y c·ªông ti·ªÅn, c√°c b·∫°n
          h√£y li√™n h·ªá v·ªõi Admin ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£
        </p>
      </div>
    </div>
  );
}
